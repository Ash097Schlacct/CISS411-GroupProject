@*
Course #: CISS 411
Course Name: Software Architecture with ASP.NET with MVC
Group 3: Ashley Steward, Linda Daniel,Allan Lopesandovall, Brenden Hoffman, 
Jason Farr, Jerome Whitaker, Jason Farr and Justin Kim.
Date Completed: 10-2-2025
Story Assigne: Ashley Steward 
Story: User Story 2
*@


@model CISS411_GroupProject.Models.ViewModels.OrderFormViewModel
@{
    ViewData["Title"] = "Place Order";
}

<h2>Place a Custom Order</h2>

<!-- Show all server-side validation errors -->
<div asp-validation-summary="All" class="text-danger"></div>

<form asp-action="Create" method="post" id="orderForm">
    @Html.AntiForgeryToken()

    <!-- Order Details -->
    <div class="form-group">
        <label asp-for="OrderInput.Occasion"></label>
        <input asp-for="OrderInput!.Occasion" class="form-control" />
        <span asp-validation-for="OrderInput.Occasion" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="OrderInput.DeliveryDate"></label>
        <input asp-for="OrderInput!.DeliveryDate" type="date" class="form-control" />
        <span asp-validation-for="OrderInput.DeliveryDate" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="OrderInput.Budget"></label>
        <input asp-for="OrderInput!.Budget" type="number" step="0.01" class="form-control" />
        <span asp-validation-for="OrderInput.Budget" class="text-danger"></span>
    </div>

    <br />

    <!-- Add Items Section -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">Add Items to Order</h5>
        </div>
        <div class="card-body">
            <div class="row align-items-end">
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Select Standard Item</label>
                        <select id="itemSelector" class="form-control">
                            <option value="">-- Select Standard Item --</option>
                            @foreach (var item in Model.AvailableItems.Where(x => !string.IsNullOrEmpty(x.Value)))
                            {
                                <option value="@item.Value">@item.Text</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <label>Quantity</label>
                        <input type="number" id="itemQuantity" class="form-control" min="1" value="1" />
                    </div>
                </div>
                <div class="col-md-2">
                    <button type="button" id="addSelectedItem" class="btn btn-success w-100">Add</button>
                </div>
            </div>
            <div class="row mt-3">
                <div class="col-12">
                    <div class="border-top pt-3">
                        <button type="button" id="addCustomItem" class="btn btn-info">Add Custom Design</button>
                        <small class="form-text text-muted">For custom designs not in our standard list</small>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Current Order Items -->
    <h4>Your Order Items</h4>

    @{
        var hasItems = Model.Items != null && Model.Items.Any();
    }

    <div id="noItemsMessage" class="alert alert-info @(hasItems ? "d-none" : "")">
        No items added yet. Select a standard item or add a custom design.
    </div>

    <div id="itemsSection" class="@(hasItems ? "" : "d-none")">
        <table class="table table-striped" id="itemsTable">
            <thead class="table-dark">
                <tr>
                    <th>Item Name</th>
                    <th width="120">Quantity</th>
                    <th>Description</th>
                    <th width="100">Action</th>
                </tr>
            </thead>
            <tbody id="itemsBody">
                @* Re-render posted items so they don't vanish on validation errors *@
                @for (var i = 0; i < Model.Items.Count; i++)
                {
                    var row = Model.Items[i];
                    var isCustom = string.Equals(row.ItemName, "Custom Design", StringComparison.OrdinalIgnoreCase);

                    <tr class="item-row">
                        <td>
                            <input type="hidden" name="Items[@i].ItemName" value="@(isCustom ? "Custom Design" : row.ItemName)" class="item-name-input" />
                            <span class="item-name-display fw-bold">@(isCustom ? "Custom Design" : row.ItemName)</span>
                            @if (isCustom)
                            {
                                <span class="badge bg-info ms-1">Custom</span>
                            }
                        </td>
                        <td>
                            <input name="Items[@i].Quantity" type="number" class="form-control quantity" min="1" value="@(row.Quantity == 0 ? 1 : row.Quantity)" required />
                            <span class="text-danger small" data-valmsg-for="Items[@i].Quantity" data-valmsg-replace="true"></span>
                        </td>
                        <td>
                            @if (isCustom)
                            {
                                <textarea name="Items[@i].CustomDescription" class="form-control custom-desc" rows="2" required>@row.CustomDescription</textarea>
                                <span class="text-danger small" data-valmsg-for="Items[@i].CustomDescription" data-valmsg-replace="true"></span>
                            }
                            else
                            {
                                <input type="hidden" name="Items[@i].CustomDescription" value="" />
                                <span class="text-muted">Standard item</span>
                            }
                        </td>
                        <td>
                            <button type="button" class="btn btn-danger btn-sm remove-item">Remove</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="mt-4">
        <button type="submit" class="btn btn-primary btn-lg">Submit Order</button>
    </div>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const itemsBody = document.getElementById('itemsBody');
            const itemsSection = document.getElementById('itemsSection');
            const noItemsMessage = document.getElementById('noItemsMessage');
            const addSelectedButton = document.getElementById('addSelectedItem');
            const addCustomButton = document.getElementById('addCustomItem');
            const itemSelector = document.getElementById('itemSelector');
            const itemQuantity = document.getElementById('itemQuantity');

            // Start itemCount from what's on the server (important after failed POST)
            let itemCount = @Model.Items.Count;

            function showItemsSection() {
                noItemsMessage.classList.add('d-none');
                itemsSection.classList.remove('d-none');
            }

            function reindexItems() {
                const rows = itemsBody.querySelectorAll('.item-row');
                itemCount = 0;
                rows.forEach((row, index) => {
                    const nameInput = row.querySelector('.item-name-input');
                    if (nameInput) nameInput.name = `Items[${index}].ItemName`;

                    const qtyInput = row.querySelector('.quantity');
                    if (qtyInput) qtyInput.name = `Items[${index}].Quantity`;

                    const descInput = row.querySelector('textarea[name*="CustomDescription"], input[name*="CustomDescription"]');
                    if (descInput) descInput.name = `Items[${index}].CustomDescription`;

                    const qtyVal = row.querySelector('[data-valmsg-for*="Quantity"]');
                    const descVal = row.querySelector('[data-valmsg-for*="CustomDescription"]');
                    if (qtyVal) qtyVal.setAttribute('data-valmsg-for', `Items[${index}].Quantity`);
                    if (descVal) descVal.setAttribute('data-valmsg-for', `Items[${index}].CustomDescription`);

                    itemCount++;
                });
            }

            function addItemRow(itemName, displayText, quantity, isCustom) {
                showItemsSection();

                const newRow = document.createElement('tr');
                newRow.className = 'item-row';
                newRow.innerHTML = isCustom
                    ? `
                        <td>
                            <input type="hidden" name="Items[${itemCount}].ItemName" value="Custom Design" class="item-name-input" />
                            <span class="item-name-display fw-bold">Custom Design</span>
                            <span class="badge bg-info ms-1">Custom</span>
                        </td>
                        <td>
                            <input name="Items[${itemCount}].Quantity" type="number" class="form-control quantity" min="1" value="${quantity || 1}" required />
                            <span class="text-danger small" data-valmsg-for="Items[${itemCount}].Quantity" data-valmsg-replace="true"></span>
                        </td>
                        <td>
                            <textarea name="Items[${itemCount}].CustomDescription" class="form-control custom-desc" rows="2" required></textarea>
                            <span class="text-danger small" data-valmsg-for="Items[${itemCount}].CustomDescription" data-valmsg-replace="true"></span>
                        </td>
                        <td>
                            <button type="button" class="btn btn-danger btn-sm remove-item">Remove</button>
                        </td>
                      `
                    : `
                        <td>
                            <input type="hidden" name="Items[${itemCount}].ItemName" value="${itemName}" class="item-name-input" />
                            <span class="item-name-display fw-bold">${displayText}</span>
                        </td>
                        <td>
                            <input name="Items[${itemCount}].Quantity" type="number" class="form-control quantity" min="1" value="${quantity || 1}" required />
                            <span class="text-danger small" data-valmsg-for="Items[${itemCount}].Quantity" data-valmsg-replace="true"></span>
                        </td>
                        <td>
                            <input type="hidden" name="Items[${itemCount}].CustomDescription" value="" />
                            <span class="text-muted">Standard item</span>
                        </td>
                        <td>
                            <button type="button" class="btn btn-danger btn-sm remove-item">Remove</button>
                        </td>
                      `;
                itemsBody.appendChild(newRow);
                itemCount++;

                newRow.querySelector('.remove-item').addEventListener('click', function () {
                    newRow.remove();
                    reindexItems();
                    if (itemsBody.querySelectorAll('.item-row').length === 0) {
                        itemsSection.classList.add('d-none');
                        noItemsMessage.classList.remove('d-none');
                    }
                });
            }

            addSelectedButton.addEventListener('click', function () {
                const opt = itemSelector.options[itemSelector.selectedIndex];
                const qty = parseInt(itemQuantity.value) || 1;
                if (opt.value) {
                    addItemRow(opt.value, opt.text, qty, false);
                    itemSelector.value = '';
                    itemQuantity.value = '1';
                } else {
                    alert('Please select an item first.');
                }
            });

            addCustomButton.addEventListener('click', function () {
                const qty = parseInt(itemQuantity.value) || 1;
                addItemRow('Custom Design', 'Custom Design', qty, true);
                itemQuantity.value = '1';
            });

            // Reindex on initial render (important after server returned with Model.Items)
            reindexItems();

            // Prevent submit if no items
            document.getElementById('orderForm').addEventListener('submit', function (e) {
                const rows = itemsBody.querySelectorAll('.item-row');
                if (rows.length === 0) {
                    alert('Please add at least one item to your order.');
                    e.preventDefault();
                }
            });
        });
    </script>
}


@*  LINDA: REMOVED TO UPDATE ORDER FORM (Saved in case regression is needed)
@model CISS411_GroupProject.Models.ViewModels.OrderFormViewModel

@{

    ViewData["Title"] = "Place Order";
}

<h2>Place a Custom Order</h2>

<form asp-action="Create" method="post">
    @Html.AntiForgeryToken()
    <div class="form-group">
        <label asp-for="Order.Occasion"></label>
        <input asp-for="Order.Occasion" class="form-control" />
        <span asp-validation-for="Order.Occasion" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Order.DeliveryDate"></label>
        <input asp-for="Order.DeliveryDate" type="date" class="form-control" />
        <span asp-validation-for="Order.DeliveryDate" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Order.Budget"></label>
        <input asp-for="Order.Budget" type="number" step="0.01" class="form-control" />
        <span asp-validation-for="Order.Budget" class="text-danger"></span>
    </div>
    <br/>
    <h4>Order Items</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Item Name</th>
                <th>Quantity</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.Items.Count; i++)
            {
                <tr>
                    <td><!--Updated for dropdown selection-->
                        <select asp-for="Items[@i].ItemName" class="form-control" asp-items="Model.AvailableItems">
                             <option value="">-- Select Item--</option>
                        </select>
                        <span asp-validation-for="Items[@i].ItemName" class="text-danger"></span>
                    </td>
                    <td>
                        <input asp-for="Items[@i].Quantity" type="number" class="form-control" />
                        <span asp-validation-for="Items[@i].Quantity" class="text-danger"></span>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button type="submit" class="btn btn-primary">Submit Order</button>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
*@